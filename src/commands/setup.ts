import chalk from 'chalk'
import { Arguments } from 'yargs'
import { logger } from '../lib/logger'

interface SetupOptions {
  // No options needed for this command
}

export const command = 'setup'
export const desc = 'Show setup instructions and helpful links for Vercel Doorman'

export const builder = {}

export const handler = async (argv: Arguments<SetupOptions>) => {
  logger.log('')
  logger.log(chalk.bold.cyan('üö™ Vercel Doorman Setup Guide'))
  logger.log(chalk.dim('Everything you need to get started with firewall management\n'))

  // Step 1: Prerequisites
  logger.log(chalk.bold('üìã Prerequisites'))
  logger.log('‚Ä¢ Vercel account with a deployed project')
  logger.log('‚Ä¢ Project with Pro plan or higher (firewall feature requirement)')
  logger.log('‚Ä¢ Admin access to the project/team\n')

  // Step 2: Getting Project Information
  logger.log(chalk.bold('üîç Finding Your Project Information'))
  logger.log('')

  logger.log(chalk.cyan('1. Project ID:'))
  logger.log('   ‚Ä¢ Go to https://vercel.com/dashboard')
  logger.log('   ‚Ä¢ Select your project')
  logger.log('   ‚Ä¢ Navigate to Settings ‚Üí General')
  logger.log('   ‚Ä¢ Copy the Project ID from the top of the page')
  logger.log('')

  logger.log(chalk.cyan('2. Team ID (if using team account):'))
  logger.log('   ‚Ä¢ Go to https://vercel.com/dashboard')
  logger.log('   ‚Ä¢ Click on your team name in the top-left')
  logger.log('   ‚Ä¢ Go to Team Settings ‚Üí General')
  logger.log('   ‚Ä¢ Copy the Team ID')
  logger.log('   ‚Ä¢ Leave empty if using personal account')
  logger.log('')

  // Step 3: API Token
  logger.log(chalk.bold('üîë Creating API Token'))
  logger.log('')
  logger.log(chalk.cyan('Steps:'))
  logger.log('   1. Visit https://vercel.com/account/tokens')
  logger.log('   2. Click "Create Token"')
  logger.log('   3. Name: "Doorman Firewall Management"')
  logger.log('   4. Expiration: Set as needed (90 days recommended)')
  logger.log('   5. Scope: Select your project or team')
  logger.log('   6. Copy the generated token')
  logger.log('')

  logger.log(chalk.cyan('Required Permissions:'))
  logger.log('   ‚Ä¢ Read access to project settings')
  logger.log('   ‚Ä¢ Write access to firewall configuration')
  logger.log('')

  // Step 4: Environment Setup
  logger.log(chalk.bold('üåç Environment Setup'))
  logger.log('')
  logger.log(chalk.cyan('Set your API token as environment variable:'))
  logger.log('')
  logger.log(chalk.green('# For current session:'))
  logger.log('export VERCEL_TOKEN="your-token-here"')
  logger.log('')
  logger.log(chalk.green('# For permanent setup (add to ~/.bashrc or ~/.zshrc):'))
  logger.log('echo \'export VERCEL_TOKEN="your-token-here"\' >> ~/.bashrc')
  logger.log('')
  logger.log(chalk.green('# Or create a .env file in your project:'))
  logger.log('echo "VERCEL_TOKEN=your-token-here" > .env')
  logger.log('')

  // Step 5: Quick Start
  logger.log(chalk.bold('üöÄ Quick Start Commands'))
  logger.log('')
  logger.log(chalk.cyan('1. Initialize configuration:'))
  logger.log('   vercel-doorman init --interactive')
  logger.log('')
  logger.log(chalk.cyan('2. Validate setup:'))
  logger.log('   vercel-doorman validate')
  logger.log('')
  logger.log(chalk.cyan('3. Check current status:'))
  logger.log('   vercel-doorman status')
  logger.log('')
  logger.log(chalk.cyan('4. View existing rules:'))
  logger.log('   vercel-doorman list')
  logger.log('')
  logger.log(chalk.cyan('5. Sync your configuration:'))
  logger.log('   vercel-doorman sync')
  logger.log('')

  // Step 6: Troubleshooting
  logger.log(chalk.bold('üîß Common Issues'))
  logger.log('')
  logger.log(chalk.yellow('‚ùå "Project not found" error:'))
  logger.log('   ‚Ä¢ Double-check your Project ID')
  logger.log('   ‚Ä¢ Ensure your token has access to the project')
  logger.log('   ‚Ä¢ Verify the project has Pro plan or higher')
  logger.log('')
  logger.log(chalk.yellow('‚ùå "Unauthorized" error:'))
  logger.log('   ‚Ä¢ Check your VERCEL_TOKEN is set correctly')
  logger.log("   ‚Ä¢ Ensure token hasn't expired")
  logger.log('   ‚Ä¢ Verify token has firewall permissions')
  logger.log('')
  logger.log(chalk.yellow('‚ùå "Firewall not available" error:'))
  logger.log('   ‚Ä¢ Upgrade to Pro plan or higher')
  logger.log('   ‚Ä¢ Contact Vercel support if issue persists')
  logger.log('')

  // Step 7: Additional Resources
  logger.log(chalk.bold('üìö Additional Resources'))
  logger.log('')
  logger.log(chalk.cyan('Documentation:'))
  logger.log('   ‚Ä¢ Doorman Docs: https://doorman.griffen.codes')
  logger.log('   ‚Ä¢ Vercel Firewall: https://vercel.com/docs/security/vercel-firewall')
  logger.log('   ‚Ä¢ API Reference: https://vercel.com/docs/rest-api/endpoints/firewall')
  logger.log('')
  logger.log(chalk.cyan('Support:'))
  logger.log('   ‚Ä¢ GitHub Issues: https://github.com/gfargo/vercel-doorman/issues')
  logger.log('   ‚Ä¢ Vercel Support: https://vercel.com/help')
  logger.log('')

  // Step 8: Security Best Practices
  logger.log(chalk.bold('üîí Security Best Practices'))
  logger.log('')
  logger.log('‚Ä¢ Store API tokens securely (use environment variables)')
  logger.log('‚Ä¢ Set token expiration dates')
  logger.log('‚Ä¢ Use principle of least privilege for token scopes')
  logger.log('‚Ä¢ Regularly rotate API tokens')
  logger.log('‚Ä¢ Test rules in staging before production')
  logger.log('‚Ä¢ Keep backups of working configurations')
  logger.log('')

  logger.log(chalk.bold.green('‚úÖ Ready to get started?'))
  logger.log(chalk.dim('Run: ') + chalk.cyan('vercel-doorman init --interactive'))
  logger.log('')
}
